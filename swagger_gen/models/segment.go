// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Segment segment
// swagger:model segment
type Segment struct {

	// constraints
	Constraints SegmentConstraints `json:"constraints"`

	// description
	// Required: true
	// Min Length: 1
	Description *string `json:"description"`

	// distributions
	Distributions SegmentDistributions `json:"distributions"`

	// id
	// Read Only: true
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// rank
	// Required: true
	// Minimum: 0
	Rank *int64 `json:"rank"`

	// rollout percent
	// Required: true
	// Maximum: 100
	// Minimum: 0
	RolloutPercent *int64 `json:"rolloutPercent"`
}

// Validate validates this segment
func (m *Segment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRolloutPercent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Segment) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *Segment) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Segment) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", m.Rank); err != nil {
		return err
	}

	if err := validate.MinimumInt("rank", "body", int64(*m.Rank), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Segment) validateRolloutPercent(formats strfmt.Registry) error {

	if err := validate.Required("rolloutPercent", "body", m.RolloutPercent); err != nil {
		return err
	}

	if err := validate.MinimumInt("rolloutPercent", "body", int64(*m.RolloutPercent), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rolloutPercent", "body", int64(*m.RolloutPercent), 100, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Segment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Segment) UnmarshalBinary(b []byte) error {
	var res Segment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
