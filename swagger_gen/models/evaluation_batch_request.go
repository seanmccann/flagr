// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationBatchRequest evaluation batch request
// swagger:model evaluationBatchRequest
type EvaluationBatchRequest struct {

	// enable debug
	EnableDebug bool `json:"enableDebug,omitempty"`

	// entities
	// Required: true
	Entities EvaluationBatchRequestEntities `json:"entities"`

	// flag ids
	// Required: true
	// Min Items: 1
	FlagIds []int64 `json:"flagIDs"`
}

// Validate validates this evaluation batch request
func (m *EvaluationBatchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntities(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlagIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationBatchRequest) validateEntities(formats strfmt.Registry) error {

	if err := validate.Required("entities", "body", m.Entities); err != nil {
		return err
	}

	if err := m.Entities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("entities")
		}
		return err
	}

	return nil
}

func (m *EvaluationBatchRequest) validateFlagIds(formats strfmt.Registry) error {

	if err := validate.Required("flagIDs", "body", m.FlagIds); err != nil {
		return err
	}

	iFlagIdsSize := int64(len(m.FlagIds))

	if err := validate.MinItems("flagIDs", "body", iFlagIdsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FlagIds); i++ {

		if err := validate.MinimumInt("flagIDs"+"."+strconv.Itoa(i), "body", int64(m.FlagIds[i]), 1, false); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationBatchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationBatchRequest) UnmarshalBinary(b []byte) error {
	var res EvaluationBatchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
