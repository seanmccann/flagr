// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EvaluationEntity evaluation entity
// swagger:model evaluationEntity
type EvaluationEntity struct {

	// entity context
	EntityContext interface{} `json:"entityContext,omitempty"`

	// entity ID
	// Required: true
	// Min Length: 1
	EntityID *string `json:"entityID"`

	// entity type
	// Required: true
	// Min Length: 1
	EntityType *string `json:"entityType"`
}

// Validate validates this evaluation entity
func (m *EvaluationEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EvaluationEntity) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entityID", "body", m.EntityID); err != nil {
		return err
	}

	if err := validate.MinLength("entityID", "body", string(*m.EntityID), 1); err != nil {
		return err
	}

	return nil
}

func (m *EvaluationEntity) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entityType", "body", m.EntityType); err != nil {
		return err
	}

	if err := validate.MinLength("entityType", "body", string(*m.EntityType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EvaluationEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EvaluationEntity) UnmarshalBinary(b []byte) error {
	var res EvaluationEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
