// Code generated by go-swagger; DO NOT EDIT.

package variant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteVariantParams creates a new DeleteVariantParams object
// with the default values initialized.
func NewDeleteVariantParams() DeleteVariantParams {
	var ()
	return DeleteVariantParams{}
}

// DeleteVariantParams contains all the bound params for the delete variant operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteVariant
type DeleteVariantParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*numeric ID of the flag
	  Required: true
	  Minimum: 1
	  In: path
	*/
	FlagID int64
	/*numeric ID of the variant
	  Required: true
	  Minimum: 1
	  In: path
	*/
	VariantID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *DeleteVariantParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rFlagID, rhkFlagID, _ := route.Params.GetOK("flagID")
	if err := o.bindFlagID(rFlagID, rhkFlagID, route.Formats); err != nil {
		res = append(res, err)
	}

	rVariantID, rhkVariantID, _ := route.Params.GetOK("variantID")
	if err := o.bindVariantID(rVariantID, rhkVariantID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteVariantParams) bindFlagID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("flagID", "path", "int64", raw)
	}
	o.FlagID = value

	if err := o.validateFlagID(formats); err != nil {
		return err
	}

	return nil
}

func (o *DeleteVariantParams) validateFlagID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("flagID", "path", int64(o.FlagID), 1, false); err != nil {
		return err
	}

	return nil
}

func (o *DeleteVariantParams) bindVariantID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("variantID", "path", "int64", raw)
	}
	o.VariantID = value

	if err := o.validateVariantID(formats); err != nil {
		return err
	}

	return nil
}

func (o *DeleteVariantParams) validateVariantID(formats strfmt.Registry) error {

	if err := validate.MinimumInt("variantID", "path", int64(o.VariantID), 1, false); err != nil {
		return err
	}

	return nil
}
