package entity

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set VariantQuerySet

// VariantQuerySet is an queryset type for Variant
type VariantQuerySet struct {
	db *gorm.DB
}

// NewVariantQuerySet constructs new VariantQuerySet
func NewVariantQuerySet(db *gorm.DB) VariantQuerySet {
	return VariantQuerySet{
		db: db.Model(&Variant{}),
	}
}

func (qs VariantQuerySet) w(db *gorm.DB) VariantQuerySet {
	return NewVariantQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) All(ret *[]Variant) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Variant) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtEq(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtGt(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtGte(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtLt(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtLte(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) CreatedAtNe(createdAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) Delete() error {
	return qs.db.Delete(Variant{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Variant) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtEq(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtGt(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtGte(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtIsNotNull() VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtIsNull() VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtLt(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtLte(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) DeletedAtNe(deletedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// FlagIDEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDEq(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id = ?", flagID))
}

// FlagIDGt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDGt(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id > ?", flagID))
}

// FlagIDGte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDGte(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id >= ?", flagID))
}

// FlagIDIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDIn(flagID uint, flagIDRest ...uint) VariantQuerySet {
	iArgs := []interface{}{flagID}
	for _, arg := range flagIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("flag_id IN (?)", iArgs))
}

// FlagIDLt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDLt(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id < ?", flagID))
}

// FlagIDLte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDLte(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id <= ?", flagID))
}

// FlagIDNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDNe(flagID uint) VariantQuerySet {
	return qs.w(qs.db.Where("flag_id != ?", flagID))
}

// FlagIDNotIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) FlagIDNotIn(flagID uint, flagIDRest ...uint) VariantQuerySet {
	iArgs := []interface{}{flagID}
	for _, arg := range flagIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("flag_id NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) GetUpdater() VariantUpdater {
	return NewVariantUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDEq(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDGt(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDGte(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDIn(ID uint, IDRest ...uint) VariantQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDLt(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDLte(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDNe(ID uint) VariantQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) IDNotIn(ID uint, IDRest ...uint) VariantQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// KeyEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) KeyEq(key string) VariantQuerySet {
	return qs.w(qs.db.Where("key = ?", key))
}

// KeyIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) KeyIn(key string, keyRest ...string) VariantQuerySet {
	iArgs := []interface{}{key}
	for _, arg := range keyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("key IN (?)", iArgs))
}

// KeyNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) KeyNe(key string) VariantQuerySet {
	return qs.w(qs.db.Where("key != ?", key))
}

// KeyNotIn is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) KeyNotIn(key string, keyRest ...string) VariantQuerySet {
	iArgs := []interface{}{key}
	for _, arg := range keyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("key NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) Limit(limit int) VariantQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs VariantQuerySet) One(ret *Variant) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderAscByCreatedAt() VariantQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderAscByDeletedAt() VariantQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByFlagID is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderAscByFlagID() VariantQuerySet {
	return qs.w(qs.db.Order("flag_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderAscByID() VariantQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderAscByUpdatedAt() VariantQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderDescByCreatedAt() VariantQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderDescByDeletedAt() VariantQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByFlagID is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderDescByFlagID() VariantQuerySet {
	return qs.w(qs.db.Order("flag_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderDescByID() VariantQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) OrderDescByUpdatedAt() VariantQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetCreatedAt(createdAt time.Time) VariantUpdater {
	u.fields[string(VariantDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetDeletedAt(deletedAt *time.Time) VariantUpdater {
	u.fields[string(VariantDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetFlagID is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetFlagID(flagID uint) VariantUpdater {
	u.fields[string(VariantDBSchema.FlagID)] = flagID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetID(ID uint) VariantUpdater {
	u.fields[string(VariantDBSchema.ID)] = ID
	return u
}

// SetKey is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetKey(key string) VariantUpdater {
	u.fields[string(VariantDBSchema.Key)] = key
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u VariantUpdater) SetUpdatedAt(updatedAt time.Time) VariantUpdater {
	u.fields[string(VariantDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u VariantUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u VariantUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtEq(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtGt(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtGte(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtLt(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtLte(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs VariantQuerySet) UpdatedAtNe(updatedAt time.Time) VariantQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set VariantQuerySet

// ===== BEGIN of Variant modifiers

type variantDBSchemaField string

func (f variantDBSchemaField) String() string {
	return string(f)
}

// VariantDBSchema stores db field names of Variant
var VariantDBSchema = struct {
	ID        variantDBSchemaField
	CreatedAt variantDBSchemaField
	UpdatedAt variantDBSchemaField
	DeletedAt variantDBSchemaField
	FlagID    variantDBSchemaField
	Key       variantDBSchemaField
}{

	ID:        variantDBSchemaField("id"),
	CreatedAt: variantDBSchemaField("created_at"),
	UpdatedAt: variantDBSchemaField("updated_at"),
	DeletedAt: variantDBSchemaField("deleted_at"),
	FlagID:    variantDBSchemaField("flag_id"),
	Key:       variantDBSchemaField("key"),
}

// Update updates Variant fields by primary key
func (o *Variant) Update(db *gorm.DB, fields ...variantDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"flag_id":    o.FlagID,
		"key":        o.Key,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Variant %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// VariantUpdater is an Variant updates manager
type VariantUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewVariantUpdater creates new Variant updater
func NewVariantUpdater(db *gorm.DB) VariantUpdater {
	return VariantUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Variant{}),
	}
}

// ===== END of Variant modifiers

// ===== END of all query sets
